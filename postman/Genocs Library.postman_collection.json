{
	"info": {
		"_postman_id": "cc8ba77e-93a1-4077-808d-02b0e4536bcd",
		"name": "Genocs Library",
		"description": "This Postman collection contains a list of endpoint you can use to see how it worrks Genocs Library. The library contains a simple set of Web Application and a full application composed by a set of services designed to implement a Microservice solution.\n\nThe Application is composed by the following Microservices:\n\n- ApiGateway\n    \n- Identity Service\n    \n- Product Service\n    \n- Order Service\n    \n- Notification (SignalR) Service\n    \n\nYou can find the library description along with a lot of other useful information at: [Genocs Library Documentation](https://gnx-blog.azurewebsites.net/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "53972",
		"_collection_link": "https://genocs.postman.co/workspace/Genocs~cac0ab1e-a0df-4c9e-875f-08faea91d1a3/collection/53972-cc8ba77e-93a1-4077-808d-02b0e4536bcd?action=share&source=collection_link&creator=53972"
	},
	"item": [
		{
			"name": "Gateway",
			"item": [
				{
					"name": "Home",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    // This test check the API Gateway response on the home\r",
									"    // The response must contains a string \"API Gateway\"  \r",
									"    pm.response.to.have.body(\"API Gateway\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api-gateway}}",
							"host": [
								"{{api-gateway}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    // This test check the API Gateway response on the healthy endpoint\r",
									"    // The response must contains a string \"Healthy\"  \r",
									"    pm.response.to.have.body(\"Healthy\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api-gateway}}/healthz",
							"host": [
								"{{api-gateway}}"
							],
							"path": [
								"healthz"
							]
						}
					},
					"response": []
				},
				{
					"name": "Alive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    // This test check the API Gateway response on the alive endpoint\r",
									"    // The response must contains a string \"Healthy\"  \r",
									"    pm.response.to.have.body(\"Healthy\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api-gateway}}/alive",
							"host": [
								"{{api-gateway}}"
							],
							"path": [
								"alive"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.body(\"Identities Service\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api-gateway}}/identities-service",
							"host": [
								"{{api-gateway}}"
							],
							"path": [
								"identities-service"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign Up",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Set UserId\", function () {\r",
									"    var req = JSON.parse(pm.request.body);\r",
									"    pm.environment.set(\"name\", req.name);\r",
									"    pm.environment.set(\"email\", req.email);\r",
									"    pm.environment.set(\"password\", req.password);\r",
									"    pm.environment.set(\"user_id\", pm.response.headers.get(\"user-id\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"name\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{$randomPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-gateway}}/identities-service/sign-up",
							"host": [
								"{{api-gateway}}"
							],
							"path": [
								"identities-service",
								"sign-up"
							]
						}
					},
					"response": []
				},
				{
					"name": "Onboarding",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Set UserId\", function () {\r",
									"    var req = JSON.parse(pm.request.body);\r",
									"    pm.environment.set(\"name\", req.name);\r",
									"    pm.environment.set(\"email\", req.email);\r",
									"    pm.environment.set(\"password\", req.password);\r",
									"    pm.environment.set(\"user_id\", pm.response.headers.get(\"user-id\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"name\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{$randomPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-gateway}}/identities-service/onboarding",
							"host": [
								"{{api-gateway}}"
							],
							"path": [
								"identities-service",
								"onboarding"
							]
						},
						"description": "The Onboarding endpoint allows to setup an account with Admin role."
					},
					"response": []
				},
				{
					"name": "Sign In",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Set UserId\", function () {\r",
									"    var response = pm.response.json();\r",
									"    pm.environment.set(\"access_token\", response.accessToken);\r",
									"    pm.environment.set(\"refresh_token\", response.refreshToken);\r",
									"    pm.environment.set(\"user_id\", response.userId);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Name\": \"{{name}}\",\r\n    \"Password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-gateway}}/identities-service/sign-in",
							"host": [
								"{{api-gateway}}"
							],
							"path": [
								"identities-service",
								"sign-in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Set the userId for further calls\r",
									"//pm.collectionVariables.set(\"user_id\", requestBody.userId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-gateway}}/identities-service/users",
							"host": [
								"{{api-gateway}}"
							],
							"path": [
								"identities-service",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Set the userId for further calls\r",
									"//pm.collectionVariables.set(\"user_id\", requestBody.userId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-gateway}}/identities-service/users/{{user_id}}",
							"host": [
								"{{api-gateway}}"
							],
							"path": [
								"identities-service",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Use refresh token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Set the userId for further calls\r",
									"//pm.collectionVariables.set(\"user_id\", requestBody.userId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{refresh_token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-gateway}}/identities-service/refresh-tokens/use",
							"host": [
								"{{api-gateway}}"
							],
							"path": [
								"identities-service",
								"refresh-tokens",
								"use"
							]
						}
					},
					"response": []
				},
				{
					"name": "Revoke access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Set the userId for further calls\r",
									"//pm.collectionVariables.set(\"user_id\", requestBody.userId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"accessToken\": \"{{access_token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-gateway}}/identities-service/access-tokens/revoke",
							"host": [
								"{{api-gateway}}"
							],
							"path": [
								"identities-service",
								"access-tokens",
								"revoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "Revoke refresh token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Set the userId for further calls\r",
									"//pm.collectionVariables.set(\"user_id\", requestBody.userId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{refresh_token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-gateway}}/identities-service/refresh-tokens/revoke",
							"host": [
								"{{api-gateway}}"
							],
							"path": [
								"identities-service",
								"refresh-tokens",
								"revoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "Lock user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-gateway}}/identities-service/users/{{user_id}}/lock",
							"host": [
								"{{api-gateway}}"
							],
							"path": [
								"identities-service",
								"users",
								"{{user_id}}",
								"lock"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product home",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-gateway}}/products-service",
							"host": [
								"{{api-gateway}}"
							],
							"path": [
								"products-service"
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Get Product Location\", function () {\r",
									"    pm.environment.set(\"product_location\", pm.response.headers.get(\"Location\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productId\": \"{{$guid}}\",\r\n    \"sku\": \"{{$randomProduct}}\",\r\n    \"unitPrice\": \"{{$randomPrice}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-gateway}}/products-service/products",
							"host": [
								"{{api-gateway}}"
							],
							"path": [
								"products-service",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get submitted Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Set ProductId\", function () {\r",
									"    var response = pm.response.json();\r",
									"    pm.environment.set(\"product_id\", response.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productId\": \"{{$guid}}\",\r\n    \"sku\": \"{{$randomProduct}}\",\r\n    \"unitPrice\": \"{{$randomPrice}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-gateway}}/products-service/{{product_location}}",
							"host": [
								"{{api-gateway}}"
							],
							"path": [
								"products-service",
								"{{product_location}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Set first ProductId\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set(\"product_id\", jsonData.items[0].id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-gateway}}/products-service/products?page=1&results=5",
							"host": [
								"{{api-gateway}}"
							],
							"path": [
								"products-service",
								"products"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "results",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-gateway}}/orders-service",
							"host": [
								"{{api-gateway}}"
							],
							"path": [
								"orders-service"
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"pm.test(\"Get Order Location\", function () {\r",
									"    pm.environment.set(\"order_location\", pm.response.headers.get(\"Location\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"products\": [\r\n        \"{{product_id}}\"\r\n    ],\r\n    \"customerId\": \"{{$guid}}\",\r\n    \"unitPrice\": {{$randomInt}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-gateway}}/orders-service/Orders",
							"host": [
								"{{api-gateway}}"
							],
							"path": [
								"orders-service",
								"Orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get submitted Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api-gateway}}/orders-service/{{order_location}}",
							"host": [
								"{{api-gateway}}"
							],
							"path": [
								"orders-service",
								"{{order_location}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder contains the APIs developed to show how Genocs library works. The application is composed by a group of services\n\n- Api Gateway\n    \n- Auth\n    \n- Products\n    \n- Orders\n    \n- SignalR\n    \n\nThe services use the pattern described in details into the [Genocs Library Documentation](https://gnx-blog.azurewebsites.net)."
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "Home",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    // This test check the Identity Service response on the home\r",
									"    // The response must contains a string \"Identity Service\"  \r",
									"    pm.response.to.have.body(\"Identity Service\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{auth}}",
							"host": [
								"{{auth}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    // This test check the API Gateway response on the healthy endpoint\r",
									"    // The response must contains a string \"Healthy\"  \r",
									"    pm.response.to.have.body(\"Healthy\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{auth}}/healthz",
							"host": [
								"{{auth}}"
							],
							"path": [
								"healthz"
							]
						}
					},
					"response": []
				},
				{
					"name": "Alive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 100ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    // This test check the API Gateway response on the alive endpoint\r",
									"    // The response must contains a string \"Healthy\"  \r",
									"    pm.response.to.have.body(\"Healthy\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{auth}}/alive",
							"host": [
								"{{auth}}"
							],
							"path": [
								"alive"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign Up",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Set UserId\", function () {\r",
									"    var req = JSON.parse(pm.request.body);\r",
									"    pm.environment.set(\"name\", req.name);\r",
									"    pm.environment.set(\"email\", req.email);\r",
									"    pm.environment.set(\"password\", req.password);\r",
									"    pm.environment.set(\"user_id\", pm.response.headers.get(\"user-id\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"name\": \"{{$randomUserName}}.Lebsack_{{$randomAlphaNumeric}}\",\r\n    \"password\": \"{{$randomPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auth}}/sign-up",
							"host": [
								"{{auth}}"
							],
							"path": [
								"sign-up"
							]
						}
					},
					"response": []
				},
				{
					"name": "Onboarding",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Set UserId\", function () {\r",
									"    var req = JSON.parse(pm.request.body);\r",
									"    pm.environment.set(\"name\", req.name);\r",
									"    pm.environment.set(\"email\", req.email);\r",
									"    pm.environment.set(\"password\", req.password);\r",
									"    pm.environment.set(\"user_id\", pm.response.headers.get(\"user-id\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"name\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{$randomPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auth}}/onboarding",
							"host": [
								"{{auth}}"
							],
							"path": [
								"onboarding"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign In",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    var response = pm.response.json();\r",
									"    pm.environment.set(\"access_token\", response.accessToken);\r",
									"    pm.environment.set(\"user_id\", response.userId);\r",
									"    pm.environment.set(\"refresh_token\", response.refreshToken);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auth}}/sign-in",
							"host": [
								"{{auth}}"
							],
							"path": [
								"sign-in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Mobile",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": {{user_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auth}}/verify-mobile",
							"host": [
								"{{auth}}"
							],
							"path": [
								"verify-mobile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Email",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": {{user_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gnx-lib-url-identities}}/verify-email",
							"host": [
								"{{gnx-lib-url-identities}}"
							],
							"path": [
								"verify-email"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{auth}}/users",
							"host": [
								"{{auth}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{auth}}/users/{{user_id}}",
							"host": [
								"{{auth}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Lock User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": \"{{user_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auth}}/users/{{user_id}}/lock",
							"host": [
								"{{auth}}"
							],
							"path": [
								"users",
								"{{user_id}}",
								"lock"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlock User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{gnx-lib-url-identities}}/users/{{user_id}}/unlock",
							"host": [
								"{{gnx-lib-url-identities}}"
							],
							"path": [
								"users",
								"{{user_id}}",
								"unlock"
							]
						}
					},
					"response": []
				}
			],
			"description": "The Autorization service that allows to manage Identity."
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Home",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"Products Service\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gnx-lib-url-products}}",
							"host": [
								"{{gnx-lib-url-products}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"Products Service\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{products}}/products",
							"host": [
								"{{products}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"Products Service\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{products}}/products/6bdbca11-54a2-469c-b212-0a4f315ae306",
							"host": [
								"{{products}}"
							],
							"path": [
								"products",
								"6bdbca11-54a2-469c-b212-0a4f315ae306"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 - Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SKU\": \"{{$randomProduct}}\",\r\n    \"UnitPrice\": {{$randomInt}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{products}}/products",
							"host": [
								"{{products}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Home",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"Orders Service\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gnx-lib-url-orders}}",
							"host": [
								"{{gnx-lib-url-orders}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"CustomerId\": \"98ec44ff-d6ce-40cf-9ab0-83f3db3009d0\",\r\n    \"ProductId\": \"9759c776-809f-4538-a382-bc1a51a404ab\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gnx-lib-url-orders}}/orders",
							"host": [
								"{{gnx-lib-url-orders}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Notifications",
			"item": [
				{
					"name": "Home",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response is correct\", function () {\r",
									"    pm.response.to.have.body(\"SignalR Service\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gnx-lib-url-signalr}}",
							"host": [
								"{{gnx-lib-url-signalr}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response is correct\", function () {\r",
									"    pm.response.to.have.body(\"pong\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gnx-lib-url-signalr}}/ping",
							"host": [
								"{{gnx-lib-url-signalr}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Notification",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"NotificationId\": \"{{$guid}}\",\r\n  \"CustomerId\": \"{{$guid}}\",\r\n  \"Message\": \"{{$randomCatchPhraseAdjective}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gnx-lib-url-signalr}}/notifications",
							"host": [
								"{{gnx-lib-url-signalr}}"
							],
							"path": [
								"notifications"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Demo",
			"item": [
				{
					"name": "External Service",
					"item": [
						{
							"name": "Issuing",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"external_reference\": \"{{$guid}}\",\r\n    \"loyalty_currency\": \"{{$guid}}\",\r\n    \"fiat_amount\": \"{{$guid}}\",\r\n    \"partner_code\": \"{{$guid}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5071/ExternalApi",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5071",
									"path": [
										"ExternalApi"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Auth",
					"item": [
						{
							"name": "Check Auth",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzUxMiIsImtpZCI6InN2YiJ9.eyJzdWIiOjEsImlhdCI6MTcyMjk1NDk2MSwiZXhwIjoxNzIzMDQxMzYxLCJlbWFpbCI6ImFkbWluQHV0dS5nbG9iYWwiLCJnaXZlbl9uYW1lIjoiQWRtaW4iLCJmYW1pbHlfbmFtZSI6IkFkbWluIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW4iLCJyb2xlcyI6WyJBZG1pbiIsIk1hbmFnZXIiLCJNZW1iZXIiXSwiZG9tYWluX2lkIjoiYWRtaW4ifQ.Ao01DGLz__hS4gopP72JM-kChvm5fdgqpnyxInR0aKluatH9JIw3cceqRJdhmBqUdkfape6E65psYhe44MJgNG7gxYDmc90QYR2Gw0M8iiQd_EI8zloVA-7PO8Myem7lWZdcqcy2wJQa0UAfvba-3d1nI3XVvezub6_YCbg0qWA",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://localhost:5071/Authorized/GetAuthorized",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5071",
									"path": [
										"Authorized",
										"GetAuthorized"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Auth Copy",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6Imdpb3ZhIiwic3ViIjoiZ2lvdmEiLCJqdGkiOiI0MGRiOTBhNCIsInNjb3BlIjoiZ3JlZXRpbmdzX2FwaSIsInJvbGUiOiJhZG1pbiIsImF1ZCI6WyJodHRwczovL2xvY2FsaG9zdDo3MDkyIiwiaHR0cDovL2xvY2FsaG9zdDo1MDAxIl0sIm5iZiI6MTczMzU5NzA5OSwiZXhwIjoxNzQxMzczMDk5LCJpYXQiOjE3MzM1OTcxMDAsImlzcyI6ImRvdG5ldC11c2VyLWp3dHMifQ.jXExVFoYvYU4KPUnTLz0kH63ZaGJEzKcsY_AIHJnGtk",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://localhost:7092/authenticate",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7092",
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Home",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Genocs Demo WebApi\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5071",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5071"
						}
					},
					"response": []
				},
				{
					"name": "Ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"pong\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5071/ping",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5071",
							"path": [
								"ping"
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder contains API request for the Genocs Library Demo Application"
		},
		{
			"name": "Demo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.body(\"Users WebApi\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{demo-service}}",
					"host": [
						"{{demo-service}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Demo - Submit order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.body(\"Users WebApi\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{demo-service}}/ServiceBusMassTransit/SubmitOrder",
					"host": [
						"{{demo-service}}"
					],
					"path": [
						"ServiceBusMassTransit",
						"SubmitOrder"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "api-gateway",
			"value": "",
			"type": "string"
		},
		{
			"key": "auth",
			"value": "",
			"type": "string"
		},
		{
			"key": "order_location",
			"value": ""
		},
		{
			"key": "product_id",
			"value": ""
		},
		{
			"key": "products",
			"value": "https://localhost:5520",
			"type": "default"
		}
	]
}